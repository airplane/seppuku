buildscript {
    repositories {
        gradlePluginPortal()
        maven {
            url = "https://maven.minecraftforge.net/"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.+'
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
    }
}

apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'idea'
apply plugin: 'signing'

version = "3.2.0"
group = "me.rigamortis"
archivesBaseName = "seppuku"
def buildmode = "IDE"
def mcVersion = "1.12.2"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

minecraft {
    mappings channel: "stable", version: "39-1.12"
    accessTransformer = file('src/main/resources/seppuku_at.cfg')


    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'fml.coreMods.load', 'me.rigamortis.seppuku.impl.fml.core.SeppukuLoadingPlugin'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2860"
    implementation group: "com.googlecode.json-simple", name: "json-simple", version: "1.1.1"
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'me.rigamortis.seppuku.impl.fml.core.SeppukuLoadingPlugin'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes 'FMLAT': 'seppuku_at.cfg'
    }
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

shadowJar {
    dependencies {
        include(dependency('com.googlecode.json-simple:json-simple:1.1.1'))
        //include(dependency('net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'))
    }

    manifest {
        attributes 'FMLCorePlugin': 'me.rigamortis.seppuku.impl.fml.core.SeppukuLoadingPlugin'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes 'FMLAT': 'seppuku_at.cfg'
    }

    exclude 'dummyThing'
    exclude 'LICENSE.txt'
    classifier = 'full'
}

/**task signJar(type: Sign) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
*/

task signJar {
    onlyIf {
        project.hasProperty('keyStore')
    }

    def signdir  = new File("$buildDir/jars/signed")
    signdir.mkdirs()

    ant.signjar(
            destDir: "${signdir.absolutePath}",
            jar: 'build/jars/*.jar',
            alias: project.findProperty('keyStoreAlias'),
            storetype: "jks",
            keystore: project.findProperty('keyStore'),
            keypass: project.findProperty('keyStoreKeyPass'),
            storepass: project.findProperty('keyStorePass'),
            verbose: true,
            preservelastmodified: "true"
    )

}

build.dependsOn {
    [
            'shadowJar',
            'reobfShadowJar',
            'signJar'
    ]
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", mcVersion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': mcVersion
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

if (buildmode == "IDE") {
    sourceSets {
        main {
            output.resourcesDir = java.outputDir
        }
    }
}
